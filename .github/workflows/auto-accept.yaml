name: auto-accept
on:
  pull_request_target:
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  auto-approve-and-merge:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Block .github changes
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const number = context.payload.pull_request.number;

            const files = await github.paginate(
              github.rest.pulls.listFiles,
              { owner, repo, pull_number: number, per_page: 100 }
            );

            const offenders = files.filter(f => f.filename.startsWith('.github/'));
            if (offenders.length) {
              const list = offenders.map(f => `${f.status} ${f.filename}`).join('\n');
              core.setFailed(`Touching .github is forbidden. Offending changes:\n${list}`);
            }

      - name: Approve the PR
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              event: "APPROVE",
              body: "approved"
            });

      - name: Merge the PR
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                merge_method: "squash",
                sha: pr.head.sha
              });
            } catch (e) {
              await github.graphql(
                `mutation($id:ID!){ enablePullRequestAutoMerge(input:{pullRequestId:$id, mergeMethod:SQUASH}){ clientMutationId } }`,
                { id: pr.node_id }
              );
            }
